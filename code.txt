
source of code (Registration needed in Google Earth Engine) :https://code.earthengine.google.com/30a0be73fb6e871577d404103b4ae49c 



// aquisitions
var S2_COL = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR');

var bands = ['B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B10'];

// Function to composite Landsat 8 SR imagery and atmospheric correction.
var compositeFunctionSR = function(image) {
  // Bits 3 and 5 are cloud shadow and cloud, respectively.
var cloudShadowBitMask = ee.Number(2).pow(3).int();
var cloudsBitMask = ee.Number(2).pow(5).int();
var qa = image.select('pixel_qa');
// Both flags should be set to zero, indicating clear conditions. 
var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0).and(
            qa.bitwiseAnd(cloudsBitMask).eq(0));
            
return image
// Scale the data to reflectance and temperature.
      .select(['B[1-7]']).multiply(0.0001)
      .addBands(image.select(['B5', 'B4']).multiply(0.1))
      .updateMask(mask);
};  

var compositeBefore = S2_COL.filterDate('2019-06-01', '2019-07-29')
                          .map(compositeFunctionSR)
                          .median();
                         
                          
var compositeLater = S2_COL.filterDate('2020-01-01', '2020-02-27')
                          .map(compositeFunctionSR)
                          .median();

var rgbVis = {bands: ('B5', 'B4'), min: 0, max: 0.3};
Map.addLayer(compositeBefore, rgbVis, 'compositeBefore');
Map.addLayer(compositeLater, rgbVis, 'compositeLater');

// NBR:
var nbrFunction = function(image) {
  return image.addBands(image.expression(
    '(swir - nir) / ' +
    '(swir + nir)', {
      nir: image.select('B4'),
      swir: image.select('B5'),
    }).rename('NDVI').clamp(-1, 1));
};

print(compositeLater);


//var thres = osi.gte(2.21).rename('thres');




var ndviBefore = nbrFunction(compositeBefore).select('NDVI');
Map.addLayer(ndviBefore, {min: -0.2, max: 1}, 'ndviBefore');

var ndviLater = nbrFunction(compositeLater).select('NDVI');
Map.addLayer(ndviLater, {min: -0.2, max: 1}, 'ndViLater');

//applying thresholds

var thres1 = ndviLater.gte(0.8).rename('thres1');
var thres2 = ndviBefore.gte(0.8).rename('thres2');

var dnvit = thres1.subtract(thres2);

print(dnvit);

Map.addLayer(dnvit, {min: -1, max: 0}, 'NDVI_dif');

//var damaged = dnvit.lt(-0.2).rename('damaged');
//Map.addLayer(damaged.updateMask(damaged), {palette: ['red']}, 'damaged');












